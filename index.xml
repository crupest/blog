<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>crupest 的博客</title>
    <link>https://crupest.cn/</link>
    <description>Recent content on crupest 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>crupest. 本站遵循 CC-BY-NC 4.0 协议</copyright>
    <lastBuildDate>Sat, 06 Jun 2020 22:11:24 +0800</lastBuildDate>
    
        <atom:link href="https://crupest.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>期末考试前的自我救赎</title>
        <link>https://crupest.cn/posts/self-salvation-before-final-tests/</link>
        <pubDate>Sat, 06 Jun 2020 22:11:24 +0800</pubDate>
        
        <guid>https://crupest.cn/posts/self-salvation-before-final-tests/</guid>
        <description>crupest 的博客 https://crupest.cn/posts/self-salvation-before-final-tests/ -&lt;h1 id=&#34;我在写什么&#34;&gt;我在写什么&lt;/h1&gt;
&lt;p&gt;我已经好久没有写很长的东西了，更不用说写这种还会公开发表在自己的博客上的内容。如果不是要放在博客上，我可能也不会有动力去写，毕竟我不是那种喜欢自己写了东西留作纪念的人。当然，也不是说不留作纪念，这只是一部分目的，还有一部分就是为了写给别人看。说不定哪天某个“天涯沦落人”偶然间看到了，多少能够引起一些感情。&lt;/p&gt;
&lt;p&gt;那我要写些什么呢？我想写的东西很多，不过没有一个是正儿八经的逻辑思维上的成果，都是些我的碎碎念。我不善于发表自己的什么宏观上的大思想，因为怕放到网上会遭受抨击。不过写起这种叫做 jibber-jabber 的东西，我是一套又一套。可能这就是多愁善感的人的一个特点，遇到芝麻大点的事，只要是能引起自己的什么感觉，就想写下来。&lt;/p&gt;
&lt;p&gt;不过，这次写这个随笔，最主要的原因，还是因为，期末考试快来了，在压力的边缘，我想做点简单的又有成就感的事——那就是写这篇随笔。再说大点，就是给我的博客增添一点新的血液，多愁善感倒是其次。&lt;/p&gt;
&lt;h1 id=&#34;期末考试怎么我了&#34;&gt;期末考试怎么我了&lt;/h1&gt;
&lt;p&gt;你还记得这篇文章的标题吗？“期末考试前的自我救赎”。我为什么要救赎我自己，当然是因为我犯了点“错误”。不过，这个救赎并不意味着我把自己拉上正轨，而是把我拉到另一条大概也能走的轨道上。&lt;/p&gt;
&lt;p&gt;这篇文章写于 2020 年 6 月 6 日晚上，也就是我的网站开发大作业上交截止日子的前夕。但你可以料想到，我没有完成大作业，而且我已经放弃了。我在打出“放弃”这两个字的时候，甚至身体抖了一下。但是我确实要放弃了，这就是所谓的“错误”。而“救赎”就是我所写的这篇随笔，以及我脑子里全部的关于这个问题所进行的思想斗争。&lt;/p&gt;
&lt;p&gt;我很想说一说，期末考试前的这段时间我到底怎么了。但我不愿意。大概作为一个正常人，没有人会直接把自己内心深处的痛苦清晰的表达出来，然后发表在公开的地方。但如果你正在看这篇文章，那么你多少应该能够想象出一些这些废话到底表达着一种怎么样的情绪。如果你不能，那也没有问题。因为我压根就没想着一个人会多么深刻的理解另一个人，尤其是在那个人说着含糊不清毫无逻辑的话的时候。如果你能想象出一点，那我觉得这便是人生大幸。&lt;/p&gt;
&lt;h1 id=&#34;我的选择&#34;&gt;我的选择&lt;/h1&gt;
&lt;p&gt;我的选择就是放弃了网站开发大作业。但这只是一个暂时的逃避，这就已经说明了这个选择的后果。但我还是选择逃避，哪怕我知道后果。&lt;/p&gt;
&lt;p&gt;这到底是不是一个好的选择？&lt;/p&gt;
&lt;p&gt;它是我做的选择，所以它是好的。这句话可能会让你疑惑，为什么我做的选择就是好的。因为我相信人具有应激性，他的基因操控他会做出对自己最有利的选择。如果一个人处于极大的压力下，他又不能简单的处理掉这个问题，我是指，我无法在明天下午5点之前赶完我的大作业，那么逃避就是一个缓和情绪的最佳选择。&lt;/p&gt;
&lt;p&gt;这是一种曲线救国。就好比打游戏之于提升人的能力和境界有没有作用。如果抛开游戏本身的意义不谈，仅谈它的娱乐效应，答案也是肯定的。它只不过是在帮你放松，让你更有精力去做所谓的真正的有用的事。简单的说，它就是一块垫脚石。&lt;/p&gt;
&lt;p&gt;可惜，理论是美好的，人的情绪却不是完全由理智控制的。所以就算我明白以上这一点，但我还是为我的选择承担了不少的负面情绪。&lt;/p&gt;
&lt;p&gt;不过还好，我写了这篇随笔。&lt;/p&gt;
&lt;h1 id=&#34;不仅仅是学习&#34;&gt;不仅仅是学习&lt;/h1&gt;
&lt;p&gt;我在开篇就说过，这篇随笔没有中心。我不是写什么正儿八经的文章，所以我大可不必去纠结那些写文章的套路，我唯一的线索就是我的脑子在想什么。&lt;/p&gt;
&lt;p&gt;如果我的大脑每时每刻都在做思想斗争，那我现在应该精神分裂了。恰恰是因为我的生活里还有许多给我带来新鲜感的东西，我才活了下来。&lt;/p&gt;
&lt;p&gt;就像写这篇文章，我一开始就没打算围绕着期末考试讲个不停。&lt;/p&gt;
&lt;p&gt;那我还注意到了些什么。&lt;/p&gt;
&lt;h2 id=&#34;写博客的工具&#34;&gt;写博客的工具&lt;/h2&gt;
&lt;p&gt;这篇文章是用一个叫做 &lt;a href=&#34;https://github.com/marktext/marktext&#34;&gt;Mark Text&lt;/a&gt; 的软件写的。体验还可以，不过它目前处于测试阶段，有些许的bug和功能上的残缺，但总的来说还是不错的。我在Github上搜索了一会儿，找到了这个软件。一开始我就想找一个开源的 Markdown 编辑器，作为我的主力博客工具。因为用 VS Code 写这种文字性博客，实在是有点格格不入。&lt;/p&gt;
&lt;h2 id=&#34;关于我的新博客&#34;&gt;关于我的新博客&lt;/h2&gt;
&lt;p&gt;正如你所见，这篇文章会发布在博客上。这大概是我第三四次搭建博客了。在这期间，我试过了很多种博客的平台，包括 &lt;a href=&#34;https://hexo.io/&#34;&gt;&lt;em&gt;hexo&lt;/em&gt;&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/halo-dev/halo&#34;&gt;&lt;em&gt;halo&lt;/em&gt;&lt;/a&gt; 之类的，光 &lt;em&gt;hexo&lt;/em&gt; 就搭了几次。现在用的是 &lt;a href=&#34;https://gohugo.io/&#34;&gt;&lt;em&gt;hugo&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我是在申请 &lt;em&gt;Let&amp;rsquo;s Encrypt&lt;/em&gt; 的 SSL 证书时，发现他们官网用的是 &lt;em&gt;hugo&lt;/em&gt; 这个静态网站生成器，当时了解了一下感觉还不错。尤其是 &lt;em&gt;hugo&lt;/em&gt; 官网的宣传里说，它生成网站的速度很快。我探索了一下，发现它是 &lt;em&gt;Go&lt;/em&gt; 写的，然后我就明白了。然后我果断放弃了用 &lt;em&gt;nodejs&lt;/em&gt; 写的 &lt;em&gt;hexo&lt;/em&gt; 。而且 &lt;em&gt;hugo&lt;/em&gt; 的开发服务器可以热重载配置文件，但是 &lt;em&gt;hexo&lt;/em&gt; 的就不行。这一点在配置主题的时候还是很有用的。&lt;/p&gt;
&lt;p&gt;想搭博客的同学可以了解一下。&lt;/p&gt;
&lt;h2 id=&#34;我的朋友们&#34;&gt;我的朋友们&lt;/h2&gt;
&lt;p&gt;如果你让我想一些高兴的事，那我首先会想到的肯定是我的好朋友们。如果不是这段时间他们尽自己可能陪伴着我，我可能早就原地螺旋爆炸。我很想写一点东西或者发一点图片，但这些东西暂时只能留在我的心里了。因为网络实在是太过于凶险，博客上面放真实信息也不太好。不过将来我可能会匿名写点这方面的东西吧。但仅仅是可能。&lt;/p&gt;
&lt;h1 id=&#34;结尾&#34;&gt;结尾&lt;/h1&gt;
&lt;p&gt;万事有始有终，到结尾我也没什么特别想说的，我想说的都差不多说完了，我的表达欲也基本得到了满足。接下来就是去迎接期末考试这一系列麻烦的东西。再说近点，就是享受这个美好的晚上，享受上传这篇博客，以及等下吃东西的乐趣。&lt;/p&gt;
- https://crupest.cn/posts/self-salvation-before-final-tests/ - crupest. 本站遵循 CC-BY-NC 4.0 协议</description>
        </item>
    
    
    
        <item>
        <title>Self Resolvable</title>
        <link>https://crupest.cn/posts/self-resolvable/</link>
        <pubDate>Sun, 30 Jun 2019 18:21:30 +0800</pubDate>
        
        <guid>https://crupest.cn/posts/self-resolvable/</guid>
        <description>crupest 的博客 https://crupest.cn/posts/self-resolvable/ -&lt;p&gt;我实在是不知道怎么把这个东西翻译成中文。&lt;/p&gt;
&lt;p&gt;任何事物的发明都有其起源。最近我在写我的那个 UI 库的时候发现了一个问题：&lt;/p&gt;
&lt;p&gt;每当我的某个控件改变一个关系到布局的属性时，我就必须得重新 Layout，但是如果在某一个消息的处理过程中，用户改变了两个这样的属性，那么就有可能会连续 Layout 两次，很明显前一次的 Layout 是不必要的。所以我就改成了每需要 Layout 的时候，就把 layout 设成脏的，然后再投递一个事件，在下一个消息循环 Layout，这样，即使用户连续改了两个属性，Layout 的消息也只投递了一次，只会进行一次 Layout。&lt;/p&gt;
&lt;p&gt;这样改了之后看似没有问题，但实际上又引入了一个潜在的 bug：万一用户改了两个属性之后又立即销毁了那个需要重新 Layout 的窗口呢？虽然说，好的写法应该是用户调用 InvokeLater 在下一个消息循环销毁窗口，但你不能对用户的行为做任何假定。于是，就需要在 Layout 消息处理中在真正 Layout 之前要判断一下窗口还在不在。&lt;/p&gt;
&lt;p&gt;自然的去想，我就需要一个独立于窗口之外的一个变量来存储这个窗口是否被销毁了，但这样感觉很麻烦，我想把这个属性直接写到窗口里面，于是就产生了这个叫做 self-resolvable 的东西。&lt;/p&gt;
&lt;p&gt;大致思路就是，有这个需要的对象应该提供一个接口&lt;code&gt;CreateResolver&lt;/code&gt;，调用这个接口你就能获得一个&lt;code&gt;Resolver&lt;/code&gt;，而这个&lt;code&gt;Resolver&lt;/code&gt;又有一个接口&lt;code&gt;Resolve&lt;/code&gt;，如果对象还在，那么调用它就返回这个对象，不然就返回&lt;code&gt;null&lt;/code&gt;。这样会很方便，因为所有的这些都是写在对象里面的，不需要在对象外面写额外的逻辑，而且上述的情况肯定不会只出现一次，如果我们把它抽象出来，那么就能一劳永逸。&lt;/p&gt;
&lt;p&gt;当然，我不会是第一个产生这种想法的人。实际上很多地方已经有了这个想法和实现。&lt;/p&gt;
&lt;p&gt;比如 Qt，我记得 Qt 里的&lt;code&gt;QObject&lt;/code&gt;都有一个销毁事件，在这个对象被销毁的时候，会发出一个信号。Qt 我不是很熟悉，但是这个功能对于写 UI 来说还是很有用的。&lt;/p&gt;
&lt;p&gt;我不使用 Qt，但实际上，C++标准库已经有了这个想法的实现，而且功能比我说的更强大。那就是&lt;a href=&#34;https://en.cppreference.com/w/cpp/memory/enable_shared_from_this&#34;&gt;&lt;code&gt;std::enable_shared_from_this&lt;/code&gt;&lt;/a&gt;。继承了这个类之后呢，你就可以随时从一个对象上调用&lt;code&gt;shared_from_this&lt;/code&gt;获取一个&lt;code&gt;shared_ptr&lt;/code&gt;，从而保证这个对象不会被销毁。如果你想要一个弱引用，那就可以调用一个&lt;code&gt;weak_from_this&lt;/code&gt;来获取一个&lt;code&gt;weak_ptr&lt;/code&gt;，但这个功能在 C++17 以后才有。标准库的这个功能，我也不是很熟悉，也从来没用过。&lt;/p&gt;
&lt;p&gt;最终我还是选择自己撸一套简陋的工具，来实现我的想法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt; // for test output&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cassert&amp;gt; // for assert&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;memory&amp;gt; //for shared_ptr&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;//forward declaration
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SelfResolvable&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ObjectResolver&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;friend&lt;/span&gt; SelfResolvable&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;

 &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
  ObjectResolver(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&amp;amp;&lt;/span&gt; resolver) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; resolver_(resolver) {}

 &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
  ObjectResolver(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ObjectResolver&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;;
  ObjectResolver&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ObjectResolver&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;;
  ObjectResolver(ObjectResolver&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;;
  ObjectResolver&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ObjectResolver&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;ObjectResolver() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;;

  T&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Resolve&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// resolver_ is null only when this has been moved.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// You shouldn&amp;#39;t resolve a moved resolver. So assert it.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    assert(resolver_);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;resolver_;
  }

 &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt; resolver_;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SelfResolvable&lt;/span&gt; {
 &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
  SelfResolvable() &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; resolver_(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;))) {}
  SelfResolvable(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; SelfResolvable&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt;;
  SelfResolvable&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; SelfResolvable&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt;;
  SelfResolvable(SelfResolvable&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt;;
  SelfResolvable&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(SelfResolvable&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;SelfResolvable() { (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;resolver_) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;; }

  ObjectResolver&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; CreateResolver() { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ObjectResolver&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(resolver_); }

 &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt; resolver_;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;O&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; SelfResolvable&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;O&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {};

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; o &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; O;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; resolver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; o&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;CreateResolver();
  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (resolver.Resolve() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; o) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt; o;
  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (resolver.Resolve() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码的核心思想，就是创建一个&lt;code&gt;shared_ptr&amp;lt;T*&amp;gt;&lt;/code&gt;，让所有的&lt;code&gt;ObjectResolver&lt;/code&gt;都保存这个&lt;code&gt;shared_ptr&lt;/code&gt;，而需要这个功能的类继承&lt;code&gt;SelfResolvable&amp;lt;T&amp;gt;&lt;/code&gt;，在构造的时候把这个&lt;code&gt;shared_ptr&lt;/code&gt;所包含的指针设为&lt;code&gt;this&lt;/code&gt;，在销毁的时候把它设为&lt;code&gt;nullptr&lt;/code&gt;。这样&lt;code&gt;ObjectResolver&lt;/code&gt;只需要通过这个指针就能获取到这个对象的存在状态以及对象本身。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ObjectResolver&lt;/code&gt;是可以随意拷贝和移动的，而且我们只需要把对应的方法设为默认就可以了，因为它只包含一个&lt;code&gt;shared_ptr&lt;/code&gt;成员。关键就是，在&lt;code&gt;Resolve&lt;/code&gt;方法里面要判断一下&lt;code&gt;shared_ptr&lt;/code&gt;本身是不是 null，如果是，说明这个&lt;code&gt;ObjectResolver&lt;/code&gt;是被移动过的，那么用户就不应该使用它，因为不能使用一个移动过的对象，这是由使用者来保证的，我们只需要加一个断言来帮助解决这个可能发生的 bug（实际上我在第一次使用时就发生了这个问题）。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;SelfResolvable&lt;/code&gt;是既不可以拷贝也不可以移动，这是我故意设置的，因为我压根就没打算让继承它的类拷贝和移动（比如窗口）。而且这个类的拷贝和移动语义设计起来也会比较复杂，因为我暂时用不上，所以就不过度设计了。&lt;/p&gt;
&lt;p&gt;最后有一点有趣的是，这里用到了一个叫做&lt;a href=&#34;https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern&#34;&gt;curiously recurring template pattern&lt;/a&gt;的东西，具体的可以去看看维基，就不赘述了。&lt;/p&gt;
&lt;h2 id=&#34;update-1&#34;&gt;Update 1&lt;/h2&gt;
&lt;p&gt;修改了所有的 Typo.&lt;/p&gt;
- https://crupest.cn/posts/self-resolvable/ - crupest. 本站遵循 CC-BY-NC 4.0 协议</description>
        </item>
    
    
  </channel>
</rss> 